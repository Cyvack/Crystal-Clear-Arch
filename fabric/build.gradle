plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    def common = project(":common")
    accessWidenerPath = common.loom.accessWidenerPath

    runs {
        create("datagen") {
            client()

            name = "Minecraft Data"
            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}")
            vmArg("-Dfabric-api.datagen.modid=crystal_clear")
            vmArg("-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}")

            environmentVariable("DATAGEN", "TRUE")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    mavenLocal()
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url = "https://maven.cafeteria.dev/releases" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://jitpack.io/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
}

processResources {
    inputs.property "version", project.version

    from(project(":common").sourceSets.main.resources)
    from(project(":forge").file('src/generated/crystal_clear')) {
        exclude('.cache/')
    }
    // Forge's data gen doesn't work with assets placed in the common project, so we place them in Forge and include them here
    from(project(":forge").sourceSets.main.resources) {
        include("assets/")
        include("data/")
    }

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("${fabric_platform}" + "-dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("${fabric_platform}")
}

jar {
    archiveClassifier.set("${fabric_platform}" + "-dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + "${fabric_platform}" + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}